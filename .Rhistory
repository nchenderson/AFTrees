obj_np <- IndivAFTSeparate(x.train=XX,y.train=yy,status=rep(1,n),Trt=Trt, ndpost=ndpost, nskip=nskip, printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj_np$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj_np$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_NPS[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE_NPS[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage_NPS[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac_NPS[k] <- mean(delta)
theta.nps[k,] <- post.means
#################################################################################
###  Semi-parametric BART and Naive
obj_sp <- IndivAFT(x.train=XX,y.train=yy,status=delta,Trt=Trt, nonparametric=FALSE, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.9, keepevery=5)
overall <- mean(obj$Theta)
post.means.sp <- colMeans(obj_sp$Theta)
### Get P(\theta > 0|x) for each individual
post.prob.sp <- apply(obj_sp$Theta, 2, function(x) mean( x > 0))
treat.assign.sp <- ifelse(post.prob.sp > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_SP[k] <- sum(harmful*treat.assign.sp + beneficial*(1 - treat.assign.sp))  ### Number misclassified
RMSE_SP[k] <- sqrt(mean((post.means.sp - TrueTheta)^2))
Coverage_SP[k] <- mean((TrueTheta > lower.ci.sp) & (TrueTheta <= upper.ci.sp))
obs_frac_SP[k] <- mean(delta)
MissClassNaive[k] <- sum(harmful*trt_naive.assign + beneficial*(1 - trt_naive.assign))
print(c(count,k))
}
Results_NP[count,1] <- mean(RMSE)
Results_NP[count,2] <- mean(MissClass)/n
Results_NP[count,3] <- mean(Coverage)
Results_NP[count,4] <- n
Results_NP[count,5] <- mean(obs_frac)
Bias <- colMeans(theta.np) - generated_fn$TrueTheta
vv <- apply(theta.np, 2, var)
Results_NP[count,6] <- mean(abs(Bias))
Results_NP[count,7] <- mean(vv)
Results_NPS[count,1] <- mean(RMSE_NPS)
Results_NPS[count,2] <- mean(MissClass_NPS)/n
Results_NPS[count,3] <- mean(Coverage_NPS)
Results_NPS[count,4] <- n
Results_NPS[count,5] <- mean(obs_frac_NPS)
Bias2 <- colMeans(theta.nps) - generated_fn$TrueTheta
vv2 <- apply(theta.nps, 2, var)
Results_NPS[count,6] <- mean(abs(Bias2))
Results_NPS[count,7] <- mean(vv2)
Results_SP[count,1] <- mean(RMSE_SP)
Results_SP[count,2] <- mean(MissClass_SP)/n
Results_SP[count,3] <- mean(Coverage_SP)
Results_SP[count,4] <- n
Results_SP[count,5] <- mean(obs_frac_SP)
Results_AFT[count,1] <- mean(RMSE_AFT)
Results_AFT[count,2] <- mean(MissClass_AFT)/n
Results_AFT[count,3] <- mean(Coverage_AFT)
Results_AFT[count,4] <- n
Results_AFT[count,5] <- mean(obs_frac)
ResultsNaive[count] <- mean(MissClassNaive)/n
#save(Results_AFT, ResultsNaive, file="~/personalized/paper_simulations/friedman/gumbel_aft_friedman.RData")
#save(Results_NP, Results_SP, Results_AFT, ResultsNaive, file="~/personalized/paper_simulations/friedman/gumbel_friedman.RData")
Results_NP
Results_NPS
Results_SP
A <- matrix(0, nrow=3, ncol=8)
A[,1] <- rep(n, 3)
A[,2] <- c(0,1,2)
A[,3] <- Results_NP[,1]
A[,4] <- Results_NP[,2]
A[,5] <- Results_NP[,3]
A[,6] <- Results_NPS[,1]
A[,7] <- Results_NPS[,2]
A[,8] <- Results_NPS[,3]
xtable(A, digits=3)
rgumbel <- function(n, mu=0, beta=1) {
u <- runif(n)
y <- mu -beta*log(-log(u))
return(y)
}
library(AFTrees)
library(survival)
library(pracma)
#source("friedman_def.R")
source("~/personalized/Reproduce_folders/SimulationCode/friedman/friedman_def.R")
form_naive <- Surv(yy, status) ~ trt
form_aft <- Surv(yy,status) ~ trt*(x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20)
n <- 200
nvars <- 20
set.seed(417)
nreps <- 50
prop_benefit <- rep(0.0, nreps)
nskip <- 500*4
ndpost <- 1000*5
nskip <- 1000
ndpost <- 500
numn <- 1
RMSE <- MissClass <- MissClassNaive <- Coverage <- obs_frac <- rep(0, nreps)
RMSE_SP <- MissClass_SP <- Coverage_SP <- obs_frac_SP <- rep(0, nreps)
RMSE_NPS <- MissClass_NPS <- Coverage_NPS <- obs_frac_NPS <- rep(0, nreps)
RMSE_AFT <- Coverage_AFT <- MissClass_AFT <- rep(0, nreps)
ResultsNaive <- rep(0, numn*3)
Results_NP <- Results_NPS <- matrix(0, nrow=numn*3, ncol=7)
Results_AFT <- Results_SP <- matrix(0, nrow=numn*3, ncol=5)
colnames(Results_NP) <- c("RMSE","MissClass","coverage", "n","obs_frac")
colnames(Results_SP) <- c("RMSE","MissClass","coverage", "n","obs_frac")
colnames(Results_AFT) <- c("RMSE","MissClass","coverage", "n","obs_frac")
count <- 1
sig <- .025
gumb_scale <- (sqrt(6)/pi)*sig
gumb_loc <- gumb_scale*digamma(1)
XX <- matrix(rnorm(nvars*n), nrow=n, ncol=nvars)
Trt <- sample(c(0,1), size=n, replace=TRUE)
Xmat <- cbind(Trt, XX)
Xmat_alt <- cbind(1 - Trt, XX)
theta.np <- theta.nps <- matrix(0.0, nrow=nreps, ncol=n)
for(k in 1:nreps) {
colnames(Xmat) <- colnames(Xmat_alt) <- c("trt","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","x16","x17","x18","x19","x20")
obj0 <- GenerateFriedmanVals(nvars)
obj1 <- GenFriedmanValsTrt(nvars, unif_low=-.2, unif_up=.3)
generated_fn <- Frand(XX, Trt, obj0, obj1)
W <- rgumbel(n, mu=gumb_loc, beta=gumb_scale)
log_yy <- generated_fn$ff + W
yy <- exp(log_yy)
status <- rep(1,n)
SimDat <- data.frame(yy, status, Xmat)
SimDatAlt <- data.frame(yy, status, Xmat_alt)
TrueTheta <- generated_fn$TrueTheta
prop_benefit[k] <- mean(TrueTheta > 0)
harmful <- ifelse(TrueTheta < 0, 1, 0)
beneficial <- 1 - harmful
Xaft <- model.matrix(form_aft, SimDat)
Xaft_alt <- model.matrix(form_aft, SimDatAlt)
VV <- Xaft - Xaft_alt
##################################################################
### AFT model fit and others
aftlm <- survreg(form_aft, dist="lognormal", data=SimDat)
aft_hat <- log(predict(aftlm))
aft_hat_alt <- log(predict(aftlm, newdata=SimDatAlt))
aft_predict <- aft_lower <- aft_upper <- aft_assign <- rep(0.0, n)
var_cov <- aftlm$var[-length(diag(aftlm$var)),-length(diag(aftlm$var))]
aft_var <- rep(0.0, n)
for(j in 1:n) {
aft_var[j] <- sum((var_cov%*%VV[j,])*VV[j,])
if(Trt[j]==1) {
aft_predict[j] <- aft_hat[j] - aft_hat_alt[j]
}
else if(Trt[j]==0) {
aft_predict[j] <- aft_hat_alt[j] - aft_hat[j]
}
aft_assign[j] <- ifelse(aft_predict[j] > 0, 1, 0)
aft_lower[j] <- aft_predict[j] - qnorm(.975)*sqrt(aft_var[j])
aft_upper[j] <- aft_predict[j] + qnorm(.975)*sqrt(aft_var[j])
}
RMSE_AFT[k] <- sqrt(mean((aft_predict - TrueTheta)^2))
Coverage_AFT[k] <- mean((TrueTheta > aft_lower) & (TrueTheta <= aft_upper))
MissClass_AFT[k] <- sum(harmful*aft_assign + beneficial*(1 - aft_assign))  ### Number misclassified
fit_naive <- survreg(form_naive, data=SimDat)
if(fit_naive$coefficients[2] > 0) {
trt_naive.assign <- rep(1, n)
}
else if( fit_naive$coefficients[2] <= 0) {
trt_naive.assign <- rep(0, n)
}
#############################################################################
#### Non-parametric BART
obj <- IndivAFT(x.train=XX,y.train=yy,status=rep(1,n),Trt=Trt, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj$Theta, 2, function(x) quantile(x, prob=.025))
MissClass[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac[k] <- 1
theta.np[k,] <- post.means
#############################################################################
#### Non-parametric BART
#Xtmp <- as.matrix(XX[,1:2], nrow=nrow(XX), ncol=2)
obj_np <- IndivAFTSeparate(x.train=XX,y.train=yy,status=rep(1,n),Trt=Trt, ndpost=ndpost, nskip=nskip, printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj_np$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj_np$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_NPS[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE_NPS[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage_NPS[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac_NPS[k] <- 1
theta.nps[k,] <- post.means
#################################################################################
###  Semi-parametric BART and Naive
obj_sp <- IndivAFT(x.train=XX,y.train=yy,status=rep(1,n),Trt=Trt, nonparametric=FALSE, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.9, keepevery=5)
overall <- mean(obj$Theta)
post.means.sp <- colMeans(obj_sp$Theta)
### Get P(\theta > 0|x) for each individual
post.prob.sp <- apply(obj_sp$Theta, 2, function(x) mean( x > 0))
treat.assign.sp <- ifelse(post.prob.sp > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_SP[k] <- sum(harmful*treat.assign.sp + beneficial*(1 - treat.assign.sp))  ### Number misclassified
RMSE_SP[k] <- sqrt(mean((post.means.sp - TrueTheta)^2))
Coverage_SP[k] <- mean((TrueTheta > lower.ci.sp) & (TrueTheta <= upper.ci.sp))
obs_frac_SP[k] <- 1
MissClassNaive[k] <- sum(harmful*trt_naive.assign + beneficial*(1 - trt_naive.assign))
print(c(count,k))
}
Results_NP[count,1] <- mean(RMSE)
Results_NP[count,2] <- mean(MissClass)/n
Results_NP[count,3] <- mean(Coverage)
Results_NP[count,4] <- n
Results_NP[count,5] <- mean(obs_frac)
Bias <- colMeans(theta.np) - generated_fn$TrueTheta
vv <- apply(theta.np, 2, var)
Results_NP[count,6] <- mean(abs(Bias))
Results_NP[count,7] <- mean(vv)
Results_NPS[count,1] <- mean(RMSE_NPS)
Results_NPS[count,2] <- mean(MissClass_NPS)/n
Results_NPS[count,3] <- mean(Coverage_NPS)
Results_NPS[count,4] <- n
Results_NPS[count,5] <- mean(obs_frac_NPS)
Bias2 <- colMeans(theta.nps) - generated_fn$TrueTheta
vv2 <- apply(theta.nps, 2, var)
Results_NPS[count,6] <- mean(abs(Bias2))
Results_NPS[count,7] <- mean(vv2)
Results_SP[count,1] <- mean(RMSE_SP)
Results_SP[count,2] <- mean(MissClass_SP)/n
Results_SP[count,3] <- mean(Coverage_SP)
Results_SP[count,4] <- n
Results_SP[count,5] <- mean(obs_frac_SP)
Results_AFT[count,1] <- mean(RMSE_AFT)
Results_AFT[count,2] <- mean(MissClass_AFT)/n
Results_AFT[count,3] <- mean(Coverage_AFT)
Results_AFT[count,4] <- n
Results_AFT[count,5] <- mean(obs_frac)
ResultsNaive[count] <- mean(MissClassNaive)/n
count <- count + 1
XX <- matrix(rnorm(nvars*n), nrow=n, ncol=nvars)
Trt <- sample(c(0,1), size=n, replace=TRUE)
Xmat <- cbind(Trt, XX)
Xmat_alt <- cbind(1 - Trt, XX)
for(k in 1:nreps) {
colnames(Xmat) <- colnames(Xmat_alt) <- c("trt","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","x16","x17","x18","x19","x20")
obj0 <- GenerateFriedmanVals(nvars)
obj1 <- GenFriedmanValsTrt(nvars, unif_low=-.2, unif_up=.3)
generated_fn <- Frand(XX, Trt, obj0, obj1)
W <- rgumbel(n, mu=gumb_loc, beta=gumb_scale)
log_yy <- generated_fn$ff + W
cens_times <- runif(n, min=.2, max=2)
delta <- as.numeric(log_yy <= cens_times)
log_yy[delta==0] <- cens_times[delta==0]
yy <- exp(log_yy)
status <- delta
SimDat <- data.frame(yy, status, Xmat)
SimDatAlt <- data.frame(yy, status, Xmat_alt)
TrueTheta <- generated_fn$TrueTheta
harmful <- ifelse(TrueTheta < 0, 1, 0)
beneficial <- 1 - harmful
Xaft <- model.matrix(form_aft, SimDat)
Xaft_alt <- model.matrix(form_aft, SimDatAlt)
VV <- Xaft - Xaft_alt
##################################################################
### AFT model fit and others
aftlm <- survreg(form_aft, dist="lognormal", data=SimDat)
aft_hat <- log(predict(aftlm))
aft_hat_alt <- log(predict(aftlm, newdata=SimDatAlt))
aft_predict <- aft_lower <- aft_upper <- aft_assign <- rep(0.0, n)
var_cov <- aftlm$var[-length(diag(aftlm$var)),-length(diag(aftlm$var))]
aft_var <- rep(0.0, n)
for(j in 1:n) {
aft_var[j] <- sum((var_cov%*%VV[j,])*VV[j,])
if(Trt[j]==1) {
aft_predict[j] <- aft_hat[j] - aft_hat_alt[j]
}
else if(Trt[j]==0) {
aft_predict[j] <- aft_hat_alt[j] - aft_hat[j]
}
aft_assign[j] <- ifelse(aft_predict[j] > 0, 1, 0)
aft_lower[j] <- aft_predict[j] - qnorm(.975)*sqrt(aft_var[j])
aft_upper[j] <- aft_predict[j] + qnorm(.975)*sqrt(aft_var[j])
}
RMSE_AFT[k] <- sqrt(mean((aft_predict - TrueTheta)^2))
Coverage_AFT[k] <- mean((TrueTheta > aft_lower) & (TrueTheta <= aft_upper))
MissClass_AFT[k] <- sum(harmful*aft_assign + beneficial*(1 - aft_assign))  ### Number misclassified
fit_naive <- survreg(form_naive, data=SimDat)
if(fit_naive$coefficients[2] > 0) {
trt_naive.assign <- rep(1, n)
}
else if( fit_naive$coefficients[2] <= 0) {
trt_naive.assign <- rep(0, n)
}
#############################################################################
#### Non-parametric BART
obj <- IndivAFT(x.train=XX,y.train=yy,status=delta,Trt=Trt, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj$Theta, 2, function(x) quantile(x, prob=.025))
MissClass[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac[k] <- mean(delta)
theta.np[k,] <- post.means
#############################################################################
#### Non-parametric BART
#Xtmp <- as.matrix(XX[,1:2], nrow=nrow(XX), ncol=2)
obj_np <- IndivAFTSeparate(x.train=XX,y.train=yy,status=rep(1,n),Trt=Trt, ndpost=ndpost, nskip=nskip, printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj_np$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj_np$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_NPS[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE_NPS[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage_NPS[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac_NPS[k] <- mean(delta)
theta.nps[k,] <- post.means
#################################################################################
###  Semi-parametric BART and Naive
obj_sp <- IndivAFT(x.train=XX,y.train=yy,status=delta,Trt=Trt, nonparametric=FALSE, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.9, keepevery=5)
overall <- mean(obj$Theta)
post.means.sp <- colMeans(obj_sp$Theta)
### Get P(\theta > 0|x) for each individual
post.prob.sp <- apply(obj_sp$Theta, 2, function(x) mean( x > 0))
treat.assign.sp <- ifelse(post.prob.sp > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_SP[k] <- sum(harmful*treat.assign.sp + beneficial*(1 - treat.assign.sp))  ### Number misclassified
RMSE_SP[k] <- sqrt(mean((post.means.sp - TrueTheta)^2))
Coverage_SP[k] <- mean((TrueTheta > lower.ci.sp) & (TrueTheta <= upper.ci.sp))
obs_frac_SP[k] <- mean(delta)
MissClassNaive[k] <- sum(harmful*trt_naive.assign + beneficial*(1 - trt_naive.assign))
print(c(count,k))
}
Results_NP[count,1] <- mean(RMSE)
Results_NP[count,2] <- mean(MissClass)/n
Results_NP[count,3] <- mean(Coverage)
Results_NP[count,4] <- n
Results_NP[count,5] <- mean(obs_frac)
Bias <- colMeans(theta.np) - generated_fn$TrueTheta
vv <- apply(theta.np, 2, var)
Results_NP[count,6] <- mean(abs(Bias))
Results_NP[count,7] <- mean(vv)
Results_NPS[count,1] <- mean(RMSE_NPS)
Results_NPS[count,2] <- mean(MissClass_NPS)/n
Results_NPS[count,3] <- mean(Coverage_NPS)
Results_NPS[count,4] <- n
Results_NPS[count,5] <- mean(obs_frac_NPS)
Bias2 <- colMeans(theta.nps) - generated_fn$TrueTheta
vv2 <- apply(theta.nps, 2, var)
Results_NPS[count,6] <- mean(abs(Bias2))
Results_NPS[count,7] <- mean(vv2)
Results_SP[count,1] <- mean(RMSE_SP)
Results_SP[count,2] <- mean(MissClass_SP)/n
Results_SP[count,3] <- mean(Coverage_SP)
Results_SP[count,4] <- n
Results_SP[count,5] <- mean(obs_frac_SP)
Results_AFT[count,1] <- mean(RMSE_AFT)
Results_AFT[count,2] <- mean(MissClass_AFT)/n
Results_AFT[count,3] <- mean(Coverage_AFT)
Results_AFT[count,4] <- n
Results_AFT[count,5] <- mean(obs_frac)
ResultsNaive[count] <- mean(MissClassNaive)/n
count <- count + 1
XX <- matrix(rnorm(nvars*n), nrow=n, ncol=nvars)
Trt <- sample(c(0,1), size=n, replace=TRUE)
Xmat <- cbind(Trt, XX)
Xmat_alt <- cbind(1 - Trt, XX)
for(k in 1:nreps) {
colnames(Xmat) <- colnames(Xmat_alt) <- c("trt","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","x16","x17","x18","x19","x20")
obj0 <- GenerateFriedmanVals(nvars)
obj1 <- GenFriedmanValsTrt(nvars, unif_low=-.2, unif_up=.3)
generated_fn <- Frand(XX, Trt, obj0, obj1)
W <- rgumbel(n, mu=gumb_loc, beta=gumb_scale)
log_yy <- generated_fn$ff + W
cens_times <- runif(n, min=-.8, max=1.4)
delta <- as.numeric(log_yy <= cens_times)
log_yy[delta==0] <- cens_times[delta==0]
yy <- exp(log_yy)
status <- delta
SimDat <- data.frame(yy, status, Xmat)
SimDatAlt <- data.frame(yy, status, Xmat_alt)
TrueTheta <- generated_fn$TrueTheta
harmful <- ifelse(TrueTheta < 0, 1, 0)
beneficial <- 1 - harmful
Xaft <- model.matrix(form_aft, SimDat)
Xaft_alt <- model.matrix(form_aft, SimDatAlt)
VV <- Xaft - Xaft_alt
##################################################################
### AFT model fit and others
aftlm <- survreg(form_aft, dist="lognormal", data=SimDat)
aft_hat <- log(predict(aftlm))
aft_hat_alt <- log(predict(aftlm, newdata=SimDatAlt))
aft_predict <- aft_lower <- aft_upper <- aft_assign <- rep(0.0, n)
var_cov <- aftlm$var[-length(diag(aftlm$var)),-length(diag(aftlm$var))]
aft_var <- rep(0.0, n)
for(j in 1:n) {
aft_var[j] <- sum((var_cov%*%VV[j,])*VV[j,])
if(Trt[j]==1) {
aft_predict[j] <- aft_hat[j] - aft_hat_alt[j]
}
else if(Trt[j]==0) {
aft_predict[j] <- aft_hat_alt[j] - aft_hat[j]
}
aft_assign[j] <- ifelse(aft_predict[j] > 0, 1, 0)
aft_lower[j] <- aft_predict[j] - qnorm(.975)*sqrt(aft_var[j])
aft_upper[j] <- aft_predict[j] + qnorm(.975)*sqrt(aft_var[j])
}
RMSE_AFT[k] <- sqrt(mean((aft_predict - TrueTheta)^2))
Coverage_AFT[k] <- mean((TrueTheta > aft_lower) & (TrueTheta <= aft_upper))
MissClass_AFT[k] <- sum(harmful*aft_assign + beneficial*(1 - aft_assign))  ### Number misclassified
fit_naive <- survreg(form_naive, data=SimDat)
if(fit_naive$coefficients[2] > 0) {
trt_naive.assign <- rep(1, n)
}
else if( fit_naive$coefficients[2] <= 0) {
trt_naive.assign <- rep(0, n)
}
#############################################################################
#### Non-parametric BART
obj <- IndivAFT(x.train=XX,y.train=yy,status=delta,Trt=Trt, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj$Theta, 2, function(x) quantile(x, prob=.025))
MissClass[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac[k] <- mean(delta)
theta.np[k,] <- post.means
#############################################################################
#### Non-parametric BART
#Xtmp <- as.matrix(XX[,1:2], nrow=nrow(XX), ncol=2)
obj_np <- IndivAFTSeparate(x.train=XX,y.train=yy,status=rep(1,n),Trt=Trt, ndpost=ndpost, nskip=nskip, printevery=100, sigquant=.5, keepevery=5)
post.means <- colMeans(obj_np$Theta)
### Get P(\theta > 0|x) for each individual
post.prob <- apply(obj_np$Theta, 2, function(x) mean( x > 0))
treat.assign <- ifelse(post.prob > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci <- apply(obj_np$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_NPS[k] <- sum(harmful*treat.assign + beneficial*(1 - treat.assign))  ### Number misclassified
RMSE_NPS[k] <- sqrt(mean((post.means - TrueTheta)^2))
Coverage_NPS[k] <- mean((TrueTheta > lower.ci) & (TrueTheta <= upper.ci))
obs_frac_NPS[k] <- mean(delta)
theta.nps[k,] <- post.means
#################################################################################
###  Semi-parametric BART and Naive
obj_sp <- IndivAFT(x.train=XX,y.train=yy,status=delta,Trt=Trt, nonparametric=FALSE, ndpost=ndpost,nskip=nskip,printevery=100, sigquant=.9, keepevery=5)
overall <- mean(obj$Theta)
post.means.sp <- colMeans(obj_sp$Theta)
### Get P(\theta > 0|x) for each individual
post.prob.sp <- apply(obj_sp$Theta, 2, function(x) mean( x > 0))
treat.assign.sp <- ifelse(post.prob.sp > 1/2, 1, 0) ### assign Trt=1 if post.prob > 1/2
upper.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.975))
lower.ci.sp <- apply(obj_sp$Theta, 2, function(x) quantile(x, prob=.025))
MissClass_SP[k] <- sum(harmful*treat.assign.sp + beneficial*(1 - treat.assign.sp))  ### Number misclassified
RMSE_SP[k] <- sqrt(mean((post.means.sp - TrueTheta)^2))
Coverage_SP[k] <- mean((TrueTheta > lower.ci.sp) & (TrueTheta <= upper.ci.sp))
obs_frac_SP[k] <- mean(delta)
MissClassNaive[k] <- sum(harmful*trt_naive.assign + beneficial*(1 - trt_naive.assign))
print(c(count,k))
}
Results_NP[count,1] <- mean(RMSE)
Results_NP[count,2] <- mean(MissClass)/n
Results_NP[count,3] <- mean(Coverage)
Results_NP[count,4] <- n
Results_NP[count,5] <- mean(obs_frac)
Bias <- colMeans(theta.np) - generated_fn$TrueTheta
vv <- apply(theta.np, 2, var)
Results_NP[count,6] <- mean(abs(Bias))
Results_NP[count,7] <- mean(vv)
Results_NPS[count,1] <- mean(RMSE_NPS)
Results_NPS[count,2] <- mean(MissClass_NPS)/n
Results_NPS[count,3] <- mean(Coverage_NPS)
Results_NPS[count,4] <- n
Results_NPS[count,5] <- mean(obs_frac_NPS)
Bias2 <- colMeans(theta.nps) - generated_fn$TrueTheta
vv2 <- apply(theta.nps, 2, var)
Results_NPS[count,6] <- mean(abs(Bias2))
Results_NPS[count,7] <- mean(vv2)
Results_SP[count,1] <- mean(RMSE_SP)
Results_SP[count,2] <- mean(MissClass_SP)/n
Results_SP[count,3] <- mean(Coverage_SP)
Results_SP[count,4] <- n
Results_SP[count,5] <- mean(obs_frac_SP)
Results_AFT[count,1] <- mean(RMSE_AFT)
Results_AFT[count,2] <- mean(MissClass_AFT)/n
Results_AFT[count,3] <- mean(Coverage_AFT)
Results_AFT[count,4] <- n
Results_AFT[count,5] <- mean(obs_frac)
ResultsNaive[count] <- mean(MissClassNaive)/n
#save(Results_AFT, ResultsNaive, file="~/personalized/paper_simulations/friedman/gumbel_aft_friedman.RData")
#save(Results_NP, Results_SP, Results_AFT, ResultsNaive, file="~/personalized/paper_simulations/friedman/gumbel_friedman.RData")
Results_NP
Results_NPS
Results_SP
A <- matrix(0, nrow=3, ncol=8)
A[,1] <- rep(n, 3)
A[,2] <- c(0,1,2)
A[,3] <- Results_NP[,1]
A[,4] <- Results_NP[,2]
A[,5] <- Results_NP[,3]
A[,6] <- Results_NPS[,1]
A[,7] <- Results_NPS[,2]
A[,8] <- Results_NPS[,3]
xtable(A, digits=3)
