{
    "data" : [
        "\nR version 3.4.3 (2017-11-30) -- \"Kite-Eating Tree\"\nCopyright (C) 2017 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from ~/MyRpackages/AFTrees/.RData]\n\n",
        "> ",
        "n <- 100",
        "> ",
        "p <- 3",
        "> ",
        "X <- matrix(rnorm(n*p), nrow=n, ncol=p)",
        "> ",
        "ind <- sample(1:n, size=50)",
        "> ",
        "X1 <- X[ind,]",
        "> ",
        "X2 <- X[-ind,]",
        "> ",
        "",
        "> ",
        "A1 <- solve(crossprod(X,X))",
        "> ",
        "A2 <- solve(crossprod(X1, X1) + crossprod(X2, X2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "A1",
        "            [,1]         [,2]         [,3]\n[1,] 0.011331594 0.0016882367 0.0011266329\n[2,] 0.001688237 0.0109646384 0.0009566785\n[3,] 0.001126633 0.0009566785 0.0091505363\n",
        "> ",
        "A2",
        "            [,1]         [,2]         [,3]\n[1,] 0.011331594 0.0016882367 0.0011266329\n[2,] 0.001688237 0.0109646384 0.0009566785\n[3,] 0.001126633 0.0009566785 0.0091505363\n",
        "> ",
        "all.equal(A1, A2)",
        "[1] TRUE\n",
        "> ",
        "n <- 100",
        "> ",
        "p <- 3",
        "> ",
        "X <- matrix(rnorm(n*p), nrow=n, ncol=p)",
        "> ",
        "ind <- sample(1:n, size=50)",
        "> ",
        "X1 <- X[ind,]",
        "> ",
        "X2 <- X[-ind,]",
        "> ",
        "",
        "> ",
        "A1 <- solve(crossprod(X,X))",
        "> ",
        "A2 <- solve(crossprod(X1, X1) + crossprod(X2, X2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "all.equal(A1, A2)",
        "[1] TRUE\n",
        "> ",
        "n <- 100",
        "> ",
        "p <- 3",
        "> ",
        "X <- matrix(rnorm(n*p), nrow=n, ncol=p)",
        "> ",
        "ind <- sample(1:n, size=50)",
        "> ",
        "X1 <- X[ind,]",
        "> ",
        "X2 <- X[-ind,]",
        "> ",
        "",
        "> ",
        "A1 <- solve(crossprod(X,X))",
        "> ",
        "A2 <- solve(crossprod(X1, X1) + crossprod(X2, X2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "all.equal(A1, A2)",
        "[1] TRUE\n",
        "> ",
        "n <- 100",
        "> ",
        "p <- 3",
        "> ",
        "X <- matrix(rnorm(n*p), nrow=n, ncol=p)",
        "> ",
        "ind <- sample(1:n, size=50)",
        "> ",
        "X1 <- X[ind,]",
        "> ",
        "X2 <- X[-ind,]",
        "> ",
        "",
        "> ",
        "A1 <- solve(crossprod(X,X))",
        "> ",
        "A2 <- solve(crossprod(X1, X1) + crossprod(X2, X2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "all.equal(A1, A2)",
        "[1] TRUE\n",
        "> ",
        "n <- 100",
        "> ",
        "p <- 3",
        "> ",
        "X <- matrix(rnorm(n*p), nrow=n, ncol=p)",
        "> ",
        "ind <- sample(1:n, size=50)",
        "> ",
        "X1 <- X[ind,]",
        "> ",
        "X2 <- X[-ind,]",
        "> ",
        "",
        "> ",
        "A1 <- solve(crossprod(X,X))",
        "> ",
        "A2 <- solve(crossprod(X1, X1) + crossprod(X2, X2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "all.equal(A1, A2)",
        "[1] TRUE\n",
        "> ",
        "n <- 100",
        "> ",
        "p <- 3",
        "> ",
        "X <- matrix(rnorm(n*p), nrow=n, ncol=p)",
        "> ",
        "ind <- sample(1:n, size=50)",
        "> ",
        "X1 <- X[ind,]",
        "> ",
        "X2 <- X[-ind,]",
        "> ",
        "",
        "> ",
        "A1 <- solve(crossprod(X,X))",
        "> ",
        "A2 <- solve(crossprod(X1, X1) + crossprod(X2, X2))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "all.equal(A1, A2)",
        "[1] TRUE\n",
        "> ",
        "library(\"AFTrees\", lib.loc=\"~/R/x86_64-pc-linux-gnu-library/3.4\")",
        "> ",
        "n <- 500",
        "> ",
        "age <- runif(n)",
        "> ",
        "age <- sort(age)",
        "> ",
        "muvec <- muvec_trt <- rep(0, n)",
        "> ",
        "for(k in 1:n) {",
        "+ ",
        "  muvec[k] <- 1/2 + pnorm(5*(age[k] - .5))",
        "+ ",
        "  muvec_trt[k] <- .35 + muvec[k]",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "## generate responses without censoring",
        "> ",
        "a0 = muvec + rnorm(n)",
        "> ",
        "a1 = muvec_trt + rnorm(n)",
        "> ",
        "yy = c(a0, a1)",
        "> ",
        "",
        "> ",
        "Trt <- c(rep(0,n), rep(1,n))",
        "> ",
        "XX <- matrix(rep(age,2), ncol=1)",
        "> ",
        "",
        "> ",
        "aftFit <- IndivAFT(XX,exp(yy),status=rep(1,2*n),Trt=Trt,ndpost=500,nskip=500,printevery=100)",
        "[1] 4.322210 6.139207\n[1] \"hell5\"\n\n\nRunning BART with numeric y\n\nnumber of trees: 200\nPrior:\n\tk: 2.000000\n\tdegrees of freedom in sigma prior: 3\n\tquantile in sigma prior: 0.500000\n\tpower and base for tree prior: 2.000000 0.950000\n\tuse quantiles for rule cut points: 1\ndata:\n\tnumber of training observations: 1000\n\tnumber of test observations: 1000\n\tnumber of explanatory variables: 2\n\n\nCutoff rules c in x<=c vs x>c\nNumber of cutoffs: (var: number of possible c):\n(1: 100) (2: 1) \n\n\nRunning mcmc loop:\niteration: 100 (of 1000)\n",
        "iteration: 200 (of 1000)\niteration: 300 (of 1000)\niteration: 400 (of 1000)\niteration: 500 (of 1000)\niteration: 600 (of 1000)\niteration: 700 (of 1000)\niteration: 800 (of 1000)\niteration: 900 (of 1000)\niteration: 1000 (of 1000)\ntime for loop: 42\n\nTree sizes, last iteration:\n2 3 2 1 2 2 3 4 2 3 2 2 2 2 2 4 4 2 2 2 \n3 2 2 3 1 2 2 3 2 3 2 2 2 3 2 3 3 2 5 2 \n2 2 3 3 2 2 3 3 2 3 2 3 2 2 3 3 2 2 2 2 \n2 2 2 2 2 3 2 2 2 4 3 2 4 4 2 3 2 2 3 2 \n2 2 3 4 2 2 4 3 2 3 3 2 3 2 3 2 3 3 2 3 \n3 3 2 2 4 3 4 2 2 2 2 4 1 2 2 3 2 ",
        "2 3 2 \n2 3 3 2 2 2 2 2 2 2 2 2 3 3 3 3 2 2 3 2 \n2 4 3 2 2 2 2 2 5 2 2 2 3 2 6 2 2 1 3 1 \n3 3 2 3 3 3 2 4 2 3 2 4 3 2 4 1 3 3 3 2 \n3 1 1 3 1 3 2 2 3 2 3 4 2 2 2 3 3 3 4 2 \nVariable Usage, last iteration (var:count):\n(1: 127) (2: 172) \nDONE BART 11-2-2014\n\n",
        "> ",
        "aftFit2 <- IndivAFTNew(XX, exp(yy), status=rep(1,2*n), Trt=Trt, ndpost=500, nskip=500, printevery=100)",
        "[1] \"hell5\"\n",
        "Error in double(nrow(x.train0) * nctot) : invalid 'length' argument\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(AFTrees)",
        "> ",
        "aftFit2 <- IndivAFTNew(XX, exp(yy), status=rep(1,2*n), Trt=Trt, ndpost=500, nskip=500, printevery=100)",
        "[1] \"hell5\"\nNULL\n[1] 1000\n",
        "Error in double(nrow(x.train0) * nctot) : invalid 'length' argument\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(AFTrees)",
        "> ",
        "aftFit2 <- IndivAFTNew(XX, exp(yy), status=rep(1,2*n), Trt=Trt, ndpost=500, nskip=500, printevery=100)",
        "[1] \"hell5\"\nNULL\n[1] 1000\n",
        "Error in double(nrow(x.train0) * nctot) : invalid 'length' argument\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(AFTrees)",
        "> ",
        "aftFit2 <- IndivAFTNew(XX, exp(yy), status=rep(1,2*n), Trt=Trt, ndpost=500, nskip=500, printevery=100)",
        "[1] \"hell5\"\nNULL\n[1] 1000\n",
        "Error in double(nrow(x.train0) * nctot) : invalid 'length' argument\n",
        "> ",
        "table(Trt)",
        "Trt\n  0   1 \n500 500 \n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        2
    ]
}